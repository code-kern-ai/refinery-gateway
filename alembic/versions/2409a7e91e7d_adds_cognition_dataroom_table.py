"""adds cognition dataroom table

Revision ID: 2409a7e91e7d
Revises: 3e59ce51739c
Create Date: 2024-09-07 13:37:42.565298

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = '2409a7e91e7d'
down_revision = '3e59ce51739c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column('project', sa.Column('type', sa.String(), nullable=True), schema='cognition')

    op.create_table(
        "dataroom",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("created_by", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["created_by"], ["user.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["project_id"], ["cognition.project.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="cognition",
    )

    op.create_table(
        "dataroom_file",
        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True, default=sa.text("uuid_generate_v4()")),
        sa.Column("dataroom_id", postgresql.UUID(as_uuid=True), sa.ForeignKey("cognition.dataroom.id", ondelete="CASCADE"), index=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("parent_id", postgresql.UUID(as_uuid=True), sa.ForeignKey("cognition.dataroom_file.id", ondelete="CASCADE"), nullable=True, index=True),
        sa.Column("created_at", sa.DateTime(), default=sa.func.now()),
        sa.Column("created_by", postgresql.UUID(as_uuid=True), sa.ForeignKey("user.id", ondelete="SET NULL"), index=True),
        schema="cognition",
    )

    op.create_table(
        "dataroom_commit",
        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True, default=sa.text("uuid_generate_v4()")),
        sa.Column("dataroom_id", postgresql.UUID(as_uuid=True), sa.ForeignKey("cognition.dataroom.id", ondelete="CASCADE"), index=True),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), default=sa.func.now()),
        sa.Column("created_by", postgresql.UUID(as_uuid=True), sa.ForeignKey("user.id", ondelete="SET NULL"), index=True),
        sa.Column("created_at", sa.DateTime(), default=sa.func.now()),
        schema="cognition",
    )

    op.create_table(
        "dataroom_commit_files",
        sa.Column("commit_id", postgresql.UUID(as_uuid=True), sa.ForeignKey("cognition.dataroom_commit.id"), primary_key=True),
        sa.Column("file_id", postgresql.UUID(as_uuid=True), sa.ForeignKey("cognition.dataroom_file.id"), primary_key=True),
        sa.Column("created_at", sa.DateTime(), default=sa.func.now()),
        schema="cognition",
    )



    # op.create_index(
    #     op.f("ix_cognition_dataroom_project_id"),
    #     "dataroom",
    #     ["project_id"],
    #     unique=False,
    #     schema="cognition",
    # )
    # op.create_index(
    #     op.f("ix_cognition_dataroom_created_by"),
    #     "dataroom",
    #     ["created_by"],
    #     unique=False,
    #     schema="cognition",
    # )

    # op.create_index(
    #     op.f("ix_cognition_dataroom_file_dataroom_id"),
    #     "dataroom_file",
    #     ["dataroom_id"],
    #     unique=False,
    #     schema="cognition",
    # )
    

    # op.create_index(
    #     op.f("ix_cognition_dataroom_commit_dataroom_id"),
    #     "dataroom_commit",
    #     ["dataroom_id"],
    #     unique=False,
    #     schema="cognition",
    # )

    # op.create_index(
    #     op.f("ix_cognition_dataroom_commit_files_commit_id"),
    #     "dataroom_commit_files",
    #     ["commit_id"],
    #     unique=False,
    #     schema="cognition",
    # )

    # op.create_index(
    #     op.f("ix_cognition_dataroom_commit_files_file_id"),
    #     "dataroom_commit_files",
    #     ["file_id"],
    #     unique=False,
    #     schema="cognition",
    # )

    # op.create_index(
    #     op.f("ix_cognition_dataroom_file_created_by"),
    #     "dataroom_file",
    #     ["created_by"],
    #     unique=False,
    #     schema="cognition",
    # )

    # op.create_index(
    #     op.f("ix_cognition_dataroom_file_parent_id"),
    #     "dataroom_file",
    #     ["parent_id"],
    #     unique=False,
    #     schema="cognition",
    # )
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index(
    #     op.f("ix_cognition_dataroom_project_id"),
    #     table_name="dataroom",
    #     schema="cognition",
    # )
    # op.drop_index(
    #     op.f("ix_cognition_dataroom_created_by"),
    #     table_name="dataroom",
    #     schema="cognition",
    # )

    # op.drop_index(
    #     op.f("ix_cognition_dataroom_file_dataroom_id"),
    #     table_name="dataroom_file",
    #     schema="cognition",
    # )

    # op.drop_index(
    #     op.f("ix_cognition_dataroom_commit_files_commit_id"),
    #     table_name="dataroom_commit_files",
    #     schema="cognition",
    # )
    # op.drop_index(
    #     op.f("ix_cognition_dataroom_file_created_by"),
    #     table_name="dataroom_file", 
    #     schema="cognition",
    # )   

    # op.drop_index(  
    #     op.f("ix_cognition_dataroom_file_parent_id"),
    #     table_name="dataroom_file", 
    #     schema="cognition",
    # )   

    op.drop_column('project', 'type', schema='cognition')

    op.drop_table("dataroom", schema="cognition")
    op.drop_table("dataroom_commit_files", schema="cognition")
    op.drop_table("dataroom_commit", schema="cognition")
    op.drop_table("dataroom_file", schema="cognition")
    # ### end Alembic commands ###