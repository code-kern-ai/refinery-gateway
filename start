#!/bin/bash
trap "echo -ne '\nstopping container...' && docker stop refinery-gateway > /dev/null 2>&1 && echo -ne '\t\t [done]\n'" EXIT

source check_config_service

HOST_IP=$(docker network inspect bridge --format='{{json .IPAM.Config}}' | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | tail -1)

echo -ne 'stopping old container...'
docker stop refinery-gateway > /dev/null 2>&1
echo -ne '\t [done]\n'

IS_ARM64=""
currentArch="$(uname -m)"
if [ "$currentArch" == "arm64" ];
then
    echo "architecture: arm64"
    IS_ARM64="_arm64"
else
    echo "architecture: $currentArch"
fi

INFERENCE_DIR=${PWD%/*}/dev-setup/inference/
if [ ! -d "$_DIR" ] 
then
    INFERENCE_DIR=${PWD%/*/*}/dev-setup/inference/
    if [ ! -d "$INFERENCE_DIR" ] 
    then
        # to include volume for local development, use the dev-setup inference folder:  
        # alternative use manual logic with
        # -v /path/to/dev-setup/inference:/models \
        echo "Can't find model data directory: $INFERENCE_DIR -> stopping" 
        exit 1
    fi
fi

echo -ne 'building container...'
docker build -t graphql-dev -f dev.Dockerfile . > /dev/null 2>&1
echo -ne '\t\t [done]\n'

echo -ne 'migrating db...\n'
docker run --rm \
--name refinery-gateway-migration \
-e POSTGRES=postgresql://postgres:onetask@graphql-postgres:5432 \
--mount type=bind,source="$(pwd)"/,target=/app \
--network dev-setup_default \
--entrypoint /usr/local/bin/alembic \
graphql-dev upgrade head
echo -ne 'migration done\n'

echo -ne 'starting...'
docker run -d --rm \
--name refinery-gateway \
-p 7051:80 \
-e AC_EXEC_ENV_IMAGE=registry.dev.onetask.ai/code-kern-ai/refinery-ac-exec-env:dev$IS_ARM64 \
-e LF_EXEC_ENV_IMAGE=registry.dev.onetask.ai/code-kern-ai/refinery-lf-exec-env:dev$IS_ARM64 \
-e ML_EXEC_ENV_IMAGE=registry.dev.onetask.ai/code-kern-ai/refinery-ml-exec-env:dev$IS_ARM64 \
-e RECORD_IDE_IMAGE=registry.dev.onetask.ai/code-kern-ai/refinery-record-ide-env:dev$IS_ARM64 \
-e LF_NETWORK=dev-setup_default \
-e S3_ENDPOINT="http://$HOST_IP:7053" \
-e S3_ENDPOINT_LOCAL=object-storage:9000 \
-e S3_ACCESS_KEY=onetask \
-e S3_SECRET_KEY=r6ywtR33!DMlaL*SUUdy \
-e WS_NOTIFY_ENDPOINT=http://refinery-websocket:8080 \
-e POSTGRES=postgresql://postgres:onetask@graphql-postgres:5432 \
-e WORKFLOW_POSTGRES=postgresql://postgres:onetask@workflow-postgres:5432 \
-e UPDATER=http://refinery-updater:80 \
-e NEURAL_SEARCH=http://refinery-neural-search:80 \
-e MODEL_PROVIDER=http://refinery-model-provider:80 \
-e WEAK_SUPERVISION=http://refinery-weak-supervisor:80 \
-e EMBEDDING_SERVICE=http://refinery-embedder:80 \
-e ZERO_SHOT=http://refinery-zero-shot:80 \
-e TOKENIZER=http://refinery-tokenizer:80 \
-e DOC_OCK=http://refinery-doc-ock:80 \
-e KRATOS_ADMIN_URL=http://kratos:4434 \
-e INFERENCE_DIR=$INFERENCE_DIR \
-v "$INFERENCE_DIR":/inference \
--mount type=bind,source="$(pwd)"/,target=/app \
-v /var/run/docker.sock:/var/run/docker.sock \
--network dev-setup_default \
graphql-dev > /dev/null 2>&1
echo -ne '\t\t\t [done]\n'

docker logs -f refinery-gateway \
